
EX01_InputOutput-Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ba4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08001d3c  08001d3c  00002d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dfc  08001dfc  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001dfc  08001dfc  00002dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e04  08001e04  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e04  08001e04  00002e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e08  08001e08  00002e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e0c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001e18  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001e18  00003030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036aa  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f39  00000000  00000000  000066e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  00007620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002ea  00000000  00000000  00007a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143a6  00000000  00000000  00007d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005356  00000000  00000000  0001c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f4ef  00000000  00000000  00021416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0905  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e90  00000000  00000000  000a0948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000a17d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001d24 	.word	0x08001d24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001d24 	.word	0x08001d24

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	@ (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f90d 	bl	8000710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f001 fb52 	bl	8001ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f93c 	bl	80007a8 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f902 	bl	8000750 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	@ (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	@ (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	@ (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	@ (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000620:	2b00      	cmp	r3, #0
 8000622:	db0a      	blt.n	800063a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	490c      	ldr	r1, [pc, #48]	@ (800065c <__NVIC_SetPriority+0x4c>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	0112      	lsls	r2, r2, #4
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	440b      	add	r3, r1
 8000634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000638:	e00a      	b.n	8000650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4908      	ldr	r1, [pc, #32]	@ (8000660 <__NVIC_SetPriority+0x50>)
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	3b04      	subs	r3, #4
 8000648:	0112      	lsls	r2, r2, #4
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	440b      	add	r3, r1
 800064e:	761a      	strb	r2, [r3, #24]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000e100 	.word	0xe000e100
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000664:	b480      	push	{r7}
 8000666:	b089      	sub	sp, #36	@ 0x24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	f1c3 0307 	rsb	r3, r3, #7
 800067e:	2b04      	cmp	r3, #4
 8000680:	bf28      	it	cs
 8000682:	2304      	movcs	r3, #4
 8000684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	3304      	adds	r3, #4
 800068a:	2b06      	cmp	r3, #6
 800068c:	d902      	bls.n	8000694 <NVIC_EncodePriority+0x30>
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3b03      	subs	r3, #3
 8000692:	e000      	b.n	8000696 <NVIC_EncodePriority+0x32>
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	f04f 32ff 	mov.w	r2, #4294967295
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	fa02 f303 	lsl.w	r3, r2, r3
 80006a2:	43da      	mvns	r2, r3
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	401a      	ands	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ac:	f04f 31ff 	mov.w	r1, #4294967295
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	fa01 f303 	lsl.w	r3, r1, r3
 80006b6:	43d9      	mvns	r1, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	4313      	orrs	r3, r2
         );
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3724      	adds	r7, #36	@ 0x24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006dc:	d301      	bcc.n	80006e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006de:	2301      	movs	r3, #1
 80006e0:	e00f      	b.n	8000702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e2:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <SysTick_Config+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ea:	210f      	movs	r1, #15
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f7ff ff8e 	bl	8000610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f4:	4b05      	ldr	r3, [pc, #20]	@ (800070c <SysTick_Config+0x40>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fa:	4b04      	ldr	r3, [pc, #16]	@ (800070c <SysTick_Config+0x40>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010

08000710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b07      	cmp	r3, #7
 800071c:	d00f      	beq.n	800073e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b06      	cmp	r3, #6
 8000722:	d00c      	beq.n	800073e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b05      	cmp	r3, #5
 8000728:	d009      	beq.n	800073e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b04      	cmp	r3, #4
 800072e:	d006      	beq.n	800073e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b03      	cmp	r3, #3
 8000734:	d003      	beq.n	800073e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000736:	2190      	movs	r1, #144	@ 0x90
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800073a:	f001 fa27 	bl	8001b8c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ff34 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	08001d3c 	.word	0x08001d3c

08000750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b0f      	cmp	r3, #15
 8000766:	d903      	bls.n	8000770 <HAL_NVIC_SetPriority+0x20>
 8000768:	21a8      	movs	r1, #168	@ 0xa8
 800076a:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <HAL_NVIC_SetPriority+0x54>)
 800076c:	f001 fa0e 	bl	8001b8c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	2b0f      	cmp	r3, #15
 8000774:	d903      	bls.n	800077e <HAL_NVIC_SetPriority+0x2e>
 8000776:	21a9      	movs	r1, #169	@ 0xa9
 8000778:	480a      	ldr	r0, [pc, #40]	@ (80007a4 <HAL_NVIC_SetPriority+0x54>)
 800077a:	f001 fa07 	bl	8001b8c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800077e:	f7ff ff39 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000782:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	68b9      	ldr	r1, [r7, #8]
 8000788:	6978      	ldr	r0, [r7, #20]
 800078a:	f7ff ff6b 	bl	8000664 <NVIC_EncodePriority>
 800078e:	4602      	mov	r2, r0
 8000790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000794:	4611      	mov	r1, r2
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff3a 	bl	8000610 <__NVIC_SetPriority>
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	08001d3c 	.word	0x08001d3c

080007a8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff8b 	bl	80006cc <SysTick_Config>
 80007b6:	4603      	mov	r3, r0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a32      	ldr	r2, [pc, #200]	@ (80008a4 <HAL_GPIO_Init+0xe4>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d017      	beq.n	800080e <HAL_GPIO_Init+0x4e>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a31      	ldr	r2, [pc, #196]	@ (80008a8 <HAL_GPIO_Init+0xe8>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d013      	beq.n	800080e <HAL_GPIO_Init+0x4e>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a30      	ldr	r2, [pc, #192]	@ (80008ac <HAL_GPIO_Init+0xec>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d00f      	beq.n	800080e <HAL_GPIO_Init+0x4e>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a2f      	ldr	r2, [pc, #188]	@ (80008b0 <HAL_GPIO_Init+0xf0>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d00b      	beq.n	800080e <HAL_GPIO_Init+0x4e>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a2e      	ldr	r2, [pc, #184]	@ (80008b4 <HAL_GPIO_Init+0xf4>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d007      	beq.n	800080e <HAL_GPIO_Init+0x4e>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a2d      	ldr	r2, [pc, #180]	@ (80008b8 <HAL_GPIO_Init+0xf8>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d003      	beq.n	800080e <HAL_GPIO_Init+0x4e>
 8000806:	21ac      	movs	r1, #172	@ 0xac
 8000808:	482c      	ldr	r0, [pc, #176]	@ (80008bc <HAL_GPIO_Init+0xfc>)
 800080a:	f001 f9bf 	bl	8001b8c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	b29b      	uxth	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d004      	beq.n	8000822 <HAL_GPIO_Init+0x62>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000820:	d303      	bcc.n	800082a <HAL_GPIO_Init+0x6a>
 8000822:	21ad      	movs	r1, #173	@ 0xad
 8000824:	4825      	ldr	r0, [pc, #148]	@ (80008bc <HAL_GPIO_Init+0xfc>)
 8000826:	f001 f9b1 	bl	8001b8c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d035      	beq.n	800089e <HAL_GPIO_Init+0xde>
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d031      	beq.n	800089e <HAL_GPIO_Init+0xde>
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b11      	cmp	r3, #17
 8000840:	d02d      	beq.n	800089e <HAL_GPIO_Init+0xde>
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d029      	beq.n	800089e <HAL_GPIO_Init+0xde>
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b12      	cmp	r3, #18
 8000850:	d025      	beq.n	800089e <HAL_GPIO_Init+0xde>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800085a:	d020      	beq.n	800089e <HAL_GPIO_Init+0xde>
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8000864:	d01b      	beq.n	800089e <HAL_GPIO_Init+0xde>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 800086e:	d016      	beq.n	800089e <HAL_GPIO_Init+0xde>
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8000878:	d011      	beq.n	800089e <HAL_GPIO_Init+0xde>
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8000882:	d00c      	beq.n	800089e <HAL_GPIO_Init+0xde>
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 800088c:	d007      	beq.n	800089e <HAL_GPIO_Init+0xde>
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d003      	beq.n	800089e <HAL_GPIO_Init+0xde>
 8000896:	21ae      	movs	r1, #174	@ 0xae
 8000898:	4808      	ldr	r0, [pc, #32]	@ (80008bc <HAL_GPIO_Init+0xfc>)
 800089a:	f001 f977 	bl	8001b8c <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
 80008a2:	e20b      	b.n	8000cbc <HAL_GPIO_Init+0x4fc>
 80008a4:	40020000 	.word	0x40020000
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40020800 	.word	0x40020800
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40021c00 	.word	0x40021c00
 80008bc:	08001d78 	.word	0x08001d78
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008c0:	2201      	movs	r2, #1
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	429a      	cmp	r2, r3
 80008da:	f040 81ec 	bne.w	8000cb6 <HAL_GPIO_Init+0x4f6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d005      	beq.n	80008f6 <HAL_GPIO_Init+0x136>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d144      	bne.n	8000980 <HAL_GPIO_Init+0x1c0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00f      	beq.n	800091e <HAL_GPIO_Init+0x15e>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d00b      	beq.n	800091e <HAL_GPIO_Init+0x15e>
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d007      	beq.n	800091e <HAL_GPIO_Init+0x15e>
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d003      	beq.n	800091e <HAL_GPIO_Init+0x15e>
 8000916:	21c0      	movs	r1, #192	@ 0xc0
 8000918:	4884      	ldr	r0, [pc, #528]	@ (8000b2c <HAL_GPIO_Init+0x36c>)
 800091a:	f001 f937 	bl	8001b8c <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2203      	movs	r2, #3
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4013      	ands	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	68da      	ldr	r2, [r3, #12]
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4313      	orrs	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000954:	2201      	movs	r2, #1
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	4013      	ands	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	091b      	lsrs	r3, r3, #4
 800096a:	f003 0201 	and.w	r2, r3, #1
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4313      	orrs	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	2b03      	cmp	r3, #3
 800098a:	d027      	beq.n	80009dc <HAL_GPIO_Init+0x21c>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d00b      	beq.n	80009ac <HAL_GPIO_Init+0x1ec>
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d007      	beq.n	80009ac <HAL_GPIO_Init+0x1ec>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d003      	beq.n	80009ac <HAL_GPIO_Init+0x1ec>
 80009a4:	21d1      	movs	r1, #209	@ 0xd1
 80009a6:	4861      	ldr	r0, [pc, #388]	@ (8000b2c <HAL_GPIO_Init+0x36c>)
 80009a8:	f001 f8f0 	bl	8001b8c <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	689a      	ldr	r2, [r3, #8]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	f040 80a3 	bne.w	8000b30 <HAL_GPIO_Init+0x370>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d077      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	2b09      	cmp	r3, #9
 80009f8:	d073      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d06f      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	691b      	ldr	r3, [r3, #16]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d06b      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d067      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	691b      	ldr	r3, [r3, #16]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d063      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	691b      	ldr	r3, [r3, #16]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d05f      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	691b      	ldr	r3, [r3, #16]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d05b      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d057      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d053      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	691b      	ldr	r3, [r3, #16]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d04f      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	691b      	ldr	r3, [r3, #16]
 8000a46:	2b04      	cmp	r3, #4
 8000a48:	d04b      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d047      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	691b      	ldr	r3, [r3, #16]
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d043      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	2b05      	cmp	r3, #5
 8000a60:	d03f      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	2b05      	cmp	r3, #5
 8000a68:	d03b      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	691b      	ldr	r3, [r3, #16]
 8000a6e:	2b05      	cmp	r3, #5
 8000a70:	d037      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	691b      	ldr	r3, [r3, #16]
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d033      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d02f      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	691b      	ldr	r3, [r3, #16]
 8000a86:	2b05      	cmp	r3, #5
 8000a88:	d02b      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d027      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	691b      	ldr	r3, [r3, #16]
 8000a96:	2b07      	cmp	r3, #7
 8000a98:	d023      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	691b      	ldr	r3, [r3, #16]
 8000a9e:	2b07      	cmp	r3, #7
 8000aa0:	d01f      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	691b      	ldr	r3, [r3, #16]
 8000aa6:	2b07      	cmp	r3, #7
 8000aa8:	d01b      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	2b08      	cmp	r3, #8
 8000ab0:	d017      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	691b      	ldr	r3, [r3, #16]
 8000ab6:	2b0a      	cmp	r3, #10
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	2b09      	cmp	r3, #9
 8000ac0:	d00f      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	2b09      	cmp	r3, #9
 8000ac8:	d00b      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	2b0c      	cmp	r3, #12
 8000ad0:	d007      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	2b0f      	cmp	r3, #15
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x322>
 8000ada:	21de      	movs	r1, #222	@ 0xde
 8000adc:	4813      	ldr	r0, [pc, #76]	@ (8000b2c <HAL_GPIO_Init+0x36c>)
 8000ade:	f001 f855 	bl	8001b8c <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	08da      	lsrs	r2, r3, #3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3208      	adds	r2, #8
 8000aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	220f      	movs	r2, #15
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	4013      	ands	r3, r2
 8000b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	691a      	ldr	r2, [r3, #16]
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	f003 0307 	and.w	r3, r3, #7
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	08da      	lsrs	r2, r3, #3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3208      	adds	r2, #8
 8000b24:	69b9      	ldr	r1, [r7, #24]
 8000b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000b2a:	e001      	b.n	8000b30 <HAL_GPIO_Init+0x370>
 8000b2c:	08001d78 	.word	0x08001d78
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4013      	ands	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 0203 	and.w	r2, r3, #3
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f000 80a2 	beq.w	8000cb6 <HAL_GPIO_Init+0x4f6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b56      	ldr	r3, [pc, #344]	@ (8000cd0 <HAL_GPIO_Init+0x510>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	4a55      	ldr	r2, [pc, #340]	@ (8000cd0 <HAL_GPIO_Init+0x510>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b82:	4b53      	ldr	r3, [pc, #332]	@ (8000cd0 <HAL_GPIO_Init+0x510>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b8e:	4a51      	ldr	r2, [pc, #324]	@ (8000cd4 <HAL_GPIO_Init+0x514>)
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	3302      	adds	r3, #2
 8000b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a48      	ldr	r2, [pc, #288]	@ (8000cd8 <HAL_GPIO_Init+0x518>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d019      	beq.n	8000bee <HAL_GPIO_Init+0x42e>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a47      	ldr	r2, [pc, #284]	@ (8000cdc <HAL_GPIO_Init+0x51c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d013      	beq.n	8000bea <HAL_GPIO_Init+0x42a>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a46      	ldr	r2, [pc, #280]	@ (8000ce0 <HAL_GPIO_Init+0x520>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d00d      	beq.n	8000be6 <HAL_GPIO_Init+0x426>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a45      	ldr	r2, [pc, #276]	@ (8000ce4 <HAL_GPIO_Init+0x524>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d007      	beq.n	8000be2 <HAL_GPIO_Init+0x422>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a44      	ldr	r2, [pc, #272]	@ (8000ce8 <HAL_GPIO_Init+0x528>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d101      	bne.n	8000bde <HAL_GPIO_Init+0x41e>
 8000bda:	2304      	movs	r3, #4
 8000bdc:	e008      	b.n	8000bf0 <HAL_GPIO_Init+0x430>
 8000bde:	2307      	movs	r3, #7
 8000be0:	e006      	b.n	8000bf0 <HAL_GPIO_Init+0x430>
 8000be2:	2303      	movs	r3, #3
 8000be4:	e004      	b.n	8000bf0 <HAL_GPIO_Init+0x430>
 8000be6:	2302      	movs	r3, #2
 8000be8:	e002      	b.n	8000bf0 <HAL_GPIO_Init+0x430>
 8000bea:	2301      	movs	r3, #1
 8000bec:	e000      	b.n	8000bf0 <HAL_GPIO_Init+0x430>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	69fa      	ldr	r2, [r7, #28]
 8000bf2:	f002 0203 	and.w	r2, r2, #3
 8000bf6:	0092      	lsls	r2, r2, #2
 8000bf8:	4093      	lsls	r3, r2
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c00:	4934      	ldr	r1, [pc, #208]	@ (8000cd4 <HAL_GPIO_Init+0x514>)
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	3302      	adds	r3, #2
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c0e:	4b37      	ldr	r3, [pc, #220]	@ (8000cec <HAL_GPIO_Init+0x52c>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_Init+0x472>
        {
          temp |= iocurrent;
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c32:	4a2e      	ldr	r2, [pc, #184]	@ (8000cec <HAL_GPIO_Init+0x52c>)
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c38:	4b2c      	ldr	r3, [pc, #176]	@ (8000cec <HAL_GPIO_Init+0x52c>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x49c>
        {
          temp |= iocurrent;
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c5c:	4a23      	ldr	r2, [pc, #140]	@ (8000cec <HAL_GPIO_Init+0x52c>)
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c62:	4b22      	ldr	r3, [pc, #136]	@ (8000cec <HAL_GPIO_Init+0x52c>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x4c6>
        {
          temp |= iocurrent;
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c86:	4a19      	ldr	r2, [pc, #100]	@ (8000cec <HAL_GPIO_Init+0x52c>)
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <HAL_GPIO_Init+0x52c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_Init+0x4f0>
        {
          temp |= iocurrent;
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	@ (8000cec <HAL_GPIO_Init+0x52c>)
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	61fb      	str	r3, [r7, #28]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	2b0f      	cmp	r3, #15
 8000cc0:	f67f adfe 	bls.w	80008c0 <HAL_GPIO_Init+0x100>
      }
    }
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3720      	adds	r7, #32
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40013800 	.word	0x40013800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020c00 	.word	0x40020c00
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40013c00 	.word	0x40013c00

08000cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d104      	bne.n	8000d0c <HAL_GPIO_ReadPin+0x1c>
 8000d02:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8000d06:	4809      	ldr	r0, [pc, #36]	@ (8000d2c <HAL_GPIO_ReadPin+0x3c>)
 8000d08:	f000 ff40 	bl	8001b8c <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691a      	ldr	r2, [r3, #16]
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	e001      	b.n	8000d22 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	08001d78 	.word	0x08001d78

08000d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d104      	bne.n	8000d50 <HAL_GPIO_WritePin+0x20>
 8000d46:	f240 119d 	movw	r1, #413	@ 0x19d
 8000d4a:	480e      	ldr	r0, [pc, #56]	@ (8000d84 <HAL_GPIO_WritePin+0x54>)
 8000d4c:	f000 ff1e 	bl	8001b8c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000d50:	787b      	ldrb	r3, [r7, #1]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d007      	beq.n	8000d66 <HAL_GPIO_WritePin+0x36>
 8000d56:	787b      	ldrb	r3, [r7, #1]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d004      	beq.n	8000d66 <HAL_GPIO_WritePin+0x36>
 8000d5c:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8000d60:	4808      	ldr	r0, [pc, #32]	@ (8000d84 <HAL_GPIO_WritePin+0x54>)
 8000d62:	f000 ff13 	bl	8001b8c <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8000d66:	787b      	ldrb	r3, [r7, #1]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d6c:	887a      	ldrh	r2, [r7, #2]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000d72:	e003      	b.n	8000d7c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d74:	887b      	ldrh	r3, [r7, #2]
 8000d76:	041a      	lsls	r2, r3, #16
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	08001d78 	.word	0x08001d78

08000d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e318      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	d903      	bls.n	8000daa <HAL_RCC_OscConfig+0x22>
 8000da2:	21e6      	movs	r1, #230	@ 0xe6
 8000da4:	4897      	ldr	r0, [pc, #604]	@ (8001004 <HAL_RCC_OscConfig+0x27c>)
 8000da6:	f000 fef1 	bl	8001b8c <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 8088 	beq.w	8000ec8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00d      	beq.n	8000ddc <HAL_RCC_OscConfig+0x54>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dc8:	d008      	beq.n	8000ddc <HAL_RCC_OscConfig+0x54>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dd2:	d003      	beq.n	8000ddc <HAL_RCC_OscConfig+0x54>
 8000dd4:	21eb      	movs	r1, #235	@ 0xeb
 8000dd6:	488b      	ldr	r0, [pc, #556]	@ (8001004 <HAL_RCC_OscConfig+0x27c>)
 8000dd8:	f000 fed8 	bl	8001b8c <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000ddc:	4b8a      	ldr	r3, [pc, #552]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d00c      	beq.n	8000e02 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000de8:	4b87      	ldr	r3, [pc, #540]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d112      	bne.n	8000e1a <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000df4:	4b84      	ldr	r3, [pc, #528]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000e00:	d10b      	bne.n	8000e1a <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e02:	4b81      	ldr	r3, [pc, #516]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d05b      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x13e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d157      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e2d8      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e22:	d106      	bne.n	8000e32 <HAL_RCC_OscConfig+0xaa>
 8000e24:	4b78      	ldr	r3, [pc, #480]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a77      	ldr	r2, [pc, #476]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e01d      	b.n	8000e6e <HAL_RCC_OscConfig+0xe6>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e3a:	d10c      	bne.n	8000e56 <HAL_RCC_OscConfig+0xce>
 8000e3c:	4b72      	ldr	r3, [pc, #456]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a71      	ldr	r2, [pc, #452]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000e42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b6f      	ldr	r3, [pc, #444]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e00b      	b.n	8000e6e <HAL_RCC_OscConfig+0xe6>
 8000e56:	4b6c      	ldr	r3, [pc, #432]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a6b      	ldr	r2, [pc, #428]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	4b69      	ldr	r3, [pc, #420]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a68      	ldr	r2, [pc, #416]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000e68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d013      	beq.n	8000e9e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e76:	f7ff fb8d 	bl	8000594 <HAL_GetTick>
 8000e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fb89 	bl	8000594 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b64      	cmp	r3, #100	@ 0x64
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e29d      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e90:	4b5d      	ldr	r3, [pc, #372]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0f0      	beq.n	8000e7e <HAL_RCC_OscConfig+0xf6>
 8000e9c:	e014      	b.n	8000ec8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fb79 	bl	8000594 <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea4:	e008      	b.n	8000eb8 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea6:	f7ff fb75 	bl	8000594 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b64      	cmp	r3, #100	@ 0x64
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e289      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb8:	4b53      	ldr	r3, [pc, #332]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f0      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x11e>
 8000ec4:	e000      	b.n	8000ec8 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d079      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d008      	beq.n	8000eee <HAL_RCC_OscConfig+0x166>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d004      	beq.n	8000eee <HAL_RCC_OscConfig+0x166>
 8000ee4:	f240 111d 	movw	r1, #285	@ 0x11d
 8000ee8:	4846      	ldr	r0, [pc, #280]	@ (8001004 <HAL_RCC_OscConfig+0x27c>)
 8000eea:	f000 fe4f 	bl	8001b8c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	2b1f      	cmp	r3, #31
 8000ef4:	d904      	bls.n	8000f00 <HAL_RCC_OscConfig+0x178>
 8000ef6:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8000efa:	4842      	ldr	r0, [pc, #264]	@ (8001004 <HAL_RCC_OscConfig+0x27c>)
 8000efc:	f000 fe46 	bl	8001b8c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f00:	4b41      	ldr	r3, [pc, #260]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d11c      	bne.n	8000f52 <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f18:	4b3b      	ldr	r3, [pc, #236]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d116      	bne.n	8000f52 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f24:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <HAL_RCC_OscConfig+0x1b4>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d001      	beq.n	8000f3c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e247      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3c:	4b32      	ldr	r3, [pc, #200]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	492f      	ldr	r1, [pc, #188]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f50:	e03a      	b.n	8000fc8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d020      	beq.n	8000f9c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800100c <HAL_RCC_OscConfig+0x284>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f60:	f7ff fb18 	bl	8000594 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f68:	f7ff fb14 	bl	8000594 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e228      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7a:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f0      	beq.n	8000f68 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f86:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	491c      	ldr	r1, [pc, #112]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
 8000f9a:	e015      	b.n	8000fc8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <HAL_RCC_OscConfig+0x284>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa2:	f7ff faf7 	bl	8000594 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000faa:	f7ff faf3 	bl	8000594 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e207      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_RCC_OscConfig+0x280>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f0      	bne.n	8000faa <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d045      	beq.n	8001060 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d008      	beq.n	8000fee <HAL_RCC_OscConfig+0x266>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d004      	beq.n	8000fee <HAL_RCC_OscConfig+0x266>
 8000fe4:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8000fe8:	4806      	ldr	r0, [pc, #24]	@ (8001004 <HAL_RCC_OscConfig+0x27c>)
 8000fea:	f000 fdcf 	bl	8001b8c <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d01e      	beq.n	8001034 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_RCC_OscConfig+0x288>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ffc:	f7ff faca 	bl	8000594 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001002:	e010      	b.n	8001026 <HAL_RCC_OscConfig+0x29e>
 8001004:	08001db4 	.word	0x08001db4
 8001008:	40023800 	.word	0x40023800
 800100c:	42470000 	.word	0x42470000
 8001010:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001014:	f7ff fabe 	bl	8000594 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e1d2      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001026:	4b5e      	ldr	r3, [pc, #376]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 8001028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f0      	beq.n	8001014 <HAL_RCC_OscConfig+0x28c>
 8001032:	e015      	b.n	8001060 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001034:	4b5b      	ldr	r3, [pc, #364]	@ (80011a4 <HAL_RCC_OscConfig+0x41c>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103a:	f7ff faab 	bl	8000594 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001042:	f7ff faa7 	bl	8000594 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e1bb      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001054:	4b52      	ldr	r3, [pc, #328]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 8001056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f0      	bne.n	8001042 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80b0 	beq.w	80011ce <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00c      	beq.n	8001094 <HAL_RCC_OscConfig+0x30c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d008      	beq.n	8001094 <HAL_RCC_OscConfig+0x30c>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b05      	cmp	r3, #5
 8001088:	d004      	beq.n	8001094 <HAL_RCC_OscConfig+0x30c>
 800108a:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 800108e:	4846      	ldr	r0, [pc, #280]	@ (80011a8 <HAL_RCC_OscConfig+0x420>)
 8001090:	f000 fd7c 	bl	8001b8c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001094:	4b42      	ldr	r3, [pc, #264]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10f      	bne.n	80010c0 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	4b3e      	ldr	r3, [pc, #248]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	4a3d      	ldr	r2, [pc, #244]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 80010aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b0:	4b3b      	ldr	r3, [pc, #236]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010bc:	2301      	movs	r3, #1
 80010be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c0:	4b3a      	ldr	r3, [pc, #232]	@ (80011ac <HAL_RCC_OscConfig+0x424>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d118      	bne.n	80010fe <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010cc:	4b37      	ldr	r3, [pc, #220]	@ (80011ac <HAL_RCC_OscConfig+0x424>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a36      	ldr	r2, [pc, #216]	@ (80011ac <HAL_RCC_OscConfig+0x424>)
 80010d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010d8:	f7ff fa5c 	bl	8000594 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e0:	f7ff fa58 	bl	8000594 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e16c      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f2:	4b2e      	ldr	r3, [pc, #184]	@ (80011ac <HAL_RCC_OscConfig+0x424>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d106      	bne.n	8001114 <HAL_RCC_OscConfig+0x38c>
 8001106:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 8001108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800110a:	4a25      	ldr	r2, [pc, #148]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6713      	str	r3, [r2, #112]	@ 0x70
 8001112:	e01c      	b.n	800114e <HAL_RCC_OscConfig+0x3c6>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b05      	cmp	r3, #5
 800111a:	d10c      	bne.n	8001136 <HAL_RCC_OscConfig+0x3ae>
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 800111e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001120:	4a1f      	ldr	r2, [pc, #124]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6713      	str	r3, [r2, #112]	@ 0x70
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 800112a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800112c:	4a1c      	ldr	r2, [pc, #112]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6713      	str	r3, [r2, #112]	@ 0x70
 8001134:	e00b      	b.n	800114e <HAL_RCC_OscConfig+0x3c6>
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 8001138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800113a:	4a19      	ldr	r2, [pc, #100]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	6713      	str	r3, [r2, #112]	@ 0x70
 8001142:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 8001144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001146:	4a16      	ldr	r2, [pc, #88]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 8001148:	f023 0304 	bic.w	r3, r3, #4
 800114c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d015      	beq.n	8001182 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001156:	f7ff fa1d 	bl	8000594 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115c:	e00a      	b.n	8001174 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115e:	f7ff fa19 	bl	8000594 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800116c:	4293      	cmp	r3, r2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e12b      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001174:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_RCC_OscConfig+0x418>)
 8001176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0ee      	beq.n	800115e <HAL_RCC_OscConfig+0x3d6>
 8001180:	e01c      	b.n	80011bc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001182:	f7ff fa07 	bl	8000594 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001188:	e012      	b.n	80011b0 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118a:	f7ff fa03 	bl	8000594 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001198:	4293      	cmp	r3, r2
 800119a:	d909      	bls.n	80011b0 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e115      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
 80011a0:	40023800 	.word	0x40023800
 80011a4:	42470e80 	.word	0x42470e80
 80011a8:	08001db4 	.word	0x08001db4
 80011ac:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b0:	4b88      	ldr	r3, [pc, #544]	@ (80013d4 <HAL_RCC_OscConfig+0x64c>)
 80011b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1e6      	bne.n	800118a <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d105      	bne.n	80011ce <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c2:	4b84      	ldr	r3, [pc, #528]	@ (80013d4 <HAL_RCC_OscConfig+0x64c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	4a83      	ldr	r2, [pc, #524]	@ (80013d4 <HAL_RCC_OscConfig+0x64c>)
 80011c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <HAL_RCC_OscConfig+0x468>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d008      	beq.n	80011f0 <HAL_RCC_OscConfig+0x468>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d004      	beq.n	80011f0 <HAL_RCC_OscConfig+0x468>
 80011e6:	f240 11cd 	movw	r1, #461	@ 0x1cd
 80011ea:	487b      	ldr	r0, [pc, #492]	@ (80013d8 <HAL_RCC_OscConfig+0x650>)
 80011ec:	f000 fcce 	bl	8001b8c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80e8 	beq.w	80013ca <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011fa:	4b76      	ldr	r3, [pc, #472]	@ (80013d4 <HAL_RCC_OscConfig+0x64c>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b08      	cmp	r3, #8
 8001204:	f000 80a9 	beq.w	800135a <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	2b02      	cmp	r3, #2
 800120e:	f040 808d 	bne.w	800132c <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <HAL_RCC_OscConfig+0x4a6>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001222:	d004      	beq.n	800122e <HAL_RCC_OscConfig+0x4a6>
 8001224:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8001228:	486b      	ldr	r0, [pc, #428]	@ (80013d8 <HAL_RCC_OscConfig+0x650>)
 800122a:	f000 fcaf 	bl	8001b8c <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d903      	bls.n	800123e <HAL_RCC_OscConfig+0x4b6>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	2b3f      	cmp	r3, #63	@ 0x3f
 800123c:	d904      	bls.n	8001248 <HAL_RCC_OscConfig+0x4c0>
 800123e:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8001242:	4865      	ldr	r0, [pc, #404]	@ (80013d8 <HAL_RCC_OscConfig+0x650>)
 8001244:	f000 fca2 	bl	8001b8c <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124c:	2b31      	cmp	r3, #49	@ 0x31
 800124e:	d904      	bls.n	800125a <HAL_RCC_OscConfig+0x4d2>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001254:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8001258:	d904      	bls.n	8001264 <HAL_RCC_OscConfig+0x4dc>
 800125a:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 800125e:	485e      	ldr	r0, [pc, #376]	@ (80013d8 <HAL_RCC_OscConfig+0x650>)
 8001260:	f000 fc94 	bl	8001b8c <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001268:	2b02      	cmp	r3, #2
 800126a:	d010      	beq.n	800128e <HAL_RCC_OscConfig+0x506>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001270:	2b04      	cmp	r3, #4
 8001272:	d00c      	beq.n	800128e <HAL_RCC_OscConfig+0x506>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001278:	2b06      	cmp	r3, #6
 800127a:	d008      	beq.n	800128e <HAL_RCC_OscConfig+0x506>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	2b08      	cmp	r3, #8
 8001282:	d004      	beq.n	800128e <HAL_RCC_OscConfig+0x506>
 8001284:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8001288:	4853      	ldr	r0, [pc, #332]	@ (80013d8 <HAL_RCC_OscConfig+0x650>)
 800128a:	f000 fc7f 	bl	8001b8c <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001292:	2b01      	cmp	r3, #1
 8001294:	d903      	bls.n	800129e <HAL_RCC_OscConfig+0x516>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129a:	2b0f      	cmp	r3, #15
 800129c:	d904      	bls.n	80012a8 <HAL_RCC_OscConfig+0x520>
 800129e:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 80012a2:	484d      	ldr	r0, [pc, #308]	@ (80013d8 <HAL_RCC_OscConfig+0x650>)
 80012a4:	f000 fc72 	bl	8001b8c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a8:	4b4c      	ldr	r3, [pc, #304]	@ (80013dc <HAL_RCC_OscConfig+0x654>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff f971 	bl	8000594 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b6:	f7ff f96d 	bl	8000594 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e081      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c8:	4b42      	ldr	r3, [pc, #264]	@ (80013d4 <HAL_RCC_OscConfig+0x64c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69da      	ldr	r2, [r3, #28]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	019b      	lsls	r3, r3, #6
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	3b01      	subs	r3, #1
 80012ee:	041b      	lsls	r3, r3, #16
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f6:	061b      	lsls	r3, r3, #24
 80012f8:	4936      	ldr	r1, [pc, #216]	@ (80013d4 <HAL_RCC_OscConfig+0x64c>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012fe:	4b37      	ldr	r3, [pc, #220]	@ (80013dc <HAL_RCC_OscConfig+0x654>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff f946 	bl	8000594 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130c:	f7ff f942 	bl	8000594 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e056      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131e:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <HAL_RCC_OscConfig+0x64c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x584>
 800132a:	e04e      	b.n	80013ca <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132c:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <HAL_RCC_OscConfig+0x654>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff f92f 	bl	8000594 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff f92b 	bl	8000594 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e03f      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134c:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <HAL_RCC_OscConfig+0x64c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x5b2>
 8001358:	e037      	b.n	80013ca <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e032      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001366:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <HAL_RCC_OscConfig+0x64c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d028      	beq.n	80013c6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800137e:	429a      	cmp	r2, r3
 8001380:	d121      	bne.n	80013c6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800138c:	429a      	cmp	r2, r3
 800138e:	d11a      	bne.n	80013c6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001396:	4013      	ands	r3, r2
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800139c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800139e:	4293      	cmp	r3, r2
 80013a0:	d111      	bne.n	80013c6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	3b01      	subs	r3, #1
 80013b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d107      	bne.n	80013c6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d001      	beq.n	80013ca <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	08001db4 	.word	0x08001db4
 80013dc:	42470060 	.word	0x42470060

080013e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e174      	b.n	80016de <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_RCC_ClockConfig+0x24>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d904      	bls.n	800140e <HAL_RCC_ClockConfig+0x2e>
 8001404:	f240 215a 	movw	r1, #602	@ 0x25a
 8001408:	487b      	ldr	r0, [pc, #492]	@ (80015f8 <HAL_RCC_ClockConfig+0x218>)
 800140a:	f000 fbbf 	bl	8001b8c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d019      	beq.n	8001448 <HAL_RCC_ClockConfig+0x68>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d016      	beq.n	8001448 <HAL_RCC_ClockConfig+0x68>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d013      	beq.n	8001448 <HAL_RCC_ClockConfig+0x68>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d010      	beq.n	8001448 <HAL_RCC_ClockConfig+0x68>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d00d      	beq.n	8001448 <HAL_RCC_ClockConfig+0x68>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d00a      	beq.n	8001448 <HAL_RCC_ClockConfig+0x68>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b06      	cmp	r3, #6
 8001436:	d007      	beq.n	8001448 <HAL_RCC_ClockConfig+0x68>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b07      	cmp	r3, #7
 800143c:	d004      	beq.n	8001448 <HAL_RCC_ClockConfig+0x68>
 800143e:	f240 215b 	movw	r1, #603	@ 0x25b
 8001442:	486d      	ldr	r0, [pc, #436]	@ (80015f8 <HAL_RCC_ClockConfig+0x218>)
 8001444:	f000 fba2 	bl	8001b8c <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001448:	4b6c      	ldr	r3, [pc, #432]	@ (80015fc <HAL_RCC_ClockConfig+0x21c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d90c      	bls.n	8001470 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b69      	ldr	r3, [pc, #420]	@ (80015fc <HAL_RCC_ClockConfig+0x21c>)
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b67      	ldr	r3, [pc, #412]	@ (80015fc <HAL_RCC_ClockConfig+0x21c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e136      	b.n	80016de <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d049      	beq.n	8001510 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001488:	4b5d      	ldr	r3, [pc, #372]	@ (8001600 <HAL_RCC_ClockConfig+0x220>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a5c      	ldr	r2, [pc, #368]	@ (8001600 <HAL_RCC_ClockConfig+0x220>)
 800148e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001492:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a0:	4b57      	ldr	r3, [pc, #348]	@ (8001600 <HAL_RCC_ClockConfig+0x220>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a56      	ldr	r2, [pc, #344]	@ (8001600 <HAL_RCC_ClockConfig+0x220>)
 80014a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d024      	beq.n	80014fe <HAL_RCC_ClockConfig+0x11e>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b80      	cmp	r3, #128	@ 0x80
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_ClockConfig+0x11e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b90      	cmp	r3, #144	@ 0x90
 80014c2:	d01c      	beq.n	80014fe <HAL_RCC_ClockConfig+0x11e>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80014ca:	d018      	beq.n	80014fe <HAL_RCC_ClockConfig+0x11e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2bb0      	cmp	r3, #176	@ 0xb0
 80014d2:	d014      	beq.n	80014fe <HAL_RCC_ClockConfig+0x11e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80014da:	d010      	beq.n	80014fe <HAL_RCC_ClockConfig+0x11e>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2bd0      	cmp	r3, #208	@ 0xd0
 80014e2:	d00c      	beq.n	80014fe <HAL_RCC_ClockConfig+0x11e>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2be0      	cmp	r3, #224	@ 0xe0
 80014ea:	d008      	beq.n	80014fe <HAL_RCC_ClockConfig+0x11e>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2bf0      	cmp	r3, #240	@ 0xf0
 80014f2:	d004      	beq.n	80014fe <HAL_RCC_ClockConfig+0x11e>
 80014f4:	f240 217e 	movw	r1, #638	@ 0x27e
 80014f8:	483f      	ldr	r0, [pc, #252]	@ (80015f8 <HAL_RCC_ClockConfig+0x218>)
 80014fa:	f000 fb47 	bl	8001b8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fe:	4b40      	ldr	r3, [pc, #256]	@ (8001600 <HAL_RCC_ClockConfig+0x220>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	493d      	ldr	r1, [pc, #244]	@ (8001600 <HAL_RCC_ClockConfig+0x220>)
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d059      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d010      	beq.n	8001546 <HAL_RCC_ClockConfig+0x166>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d00c      	beq.n	8001546 <HAL_RCC_ClockConfig+0x166>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d008      	beq.n	8001546 <HAL_RCC_ClockConfig+0x166>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d004      	beq.n	8001546 <HAL_RCC_ClockConfig+0x166>
 800153c:	f240 2185 	movw	r1, #645	@ 0x285
 8001540:	482d      	ldr	r0, [pc, #180]	@ (80015f8 <HAL_RCC_ClockConfig+0x218>)
 8001542:	f000 fb23 	bl	8001b8c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d107      	bne.n	800155e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <HAL_RCC_ClockConfig+0x220>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d119      	bne.n	800158e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0bf      	b.n	80016de <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d003      	beq.n	800156e <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800156a:	2b03      	cmp	r3, #3
 800156c:	d107      	bne.n	800157e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156e:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <HAL_RCC_ClockConfig+0x220>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d109      	bne.n	800158e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0af      	b.n	80016de <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <HAL_RCC_ClockConfig+0x220>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0a7      	b.n	80016de <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <HAL_RCC_ClockConfig+0x220>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f023 0203 	bic.w	r2, r3, #3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	4919      	ldr	r1, [pc, #100]	@ (8001600 <HAL_RCC_ClockConfig+0x220>)
 800159c:	4313      	orrs	r3, r2
 800159e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015a0:	f7fe fff8 	bl	8000594 <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	e00a      	b.n	80015be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a8:	f7fe fff4 	bl	8000594 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e08f      	b.n	80016de <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_RCC_ClockConfig+0x220>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 020c 	and.w	r2, r3, #12
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d1eb      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_RCC_ClockConfig+0x21c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d212      	bcs.n	8001604 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <HAL_RCC_ClockConfig+0x21c>)
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <HAL_RCC_ClockConfig+0x21c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d007      	beq.n	8001604 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e072      	b.n	80016de <HAL_RCC_ClockConfig+0x2fe>
 80015f8:	08001db4 	.word	0x08001db4
 80015fc:	40023c00 	.word	0x40023c00
 8001600:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d025      	beq.n	800165c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d018      	beq.n	800164a <HAL_RCC_ClockConfig+0x26a>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001620:	d013      	beq.n	800164a <HAL_RCC_ClockConfig+0x26a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800162a:	d00e      	beq.n	800164a <HAL_RCC_ClockConfig+0x26a>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001634:	d009      	beq.n	800164a <HAL_RCC_ClockConfig+0x26a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800163e:	d004      	beq.n	800164a <HAL_RCC_ClockConfig+0x26a>
 8001640:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8001644:	4828      	ldr	r0, [pc, #160]	@ (80016e8 <HAL_RCC_ClockConfig+0x308>)
 8001646:	f000 faa1 	bl	8001b8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800164a:	4b28      	ldr	r3, [pc, #160]	@ (80016ec <HAL_RCC_ClockConfig+0x30c>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	4925      	ldr	r1, [pc, #148]	@ (80016ec <HAL_RCC_ClockConfig+0x30c>)
 8001658:	4313      	orrs	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d026      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d018      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x2c2>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001678:	d013      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x2c2>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8001682:	d00e      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x2c2>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800168c:	d009      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x2c2>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8001696:	d004      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x2c2>
 8001698:	f240 21ca 	movw	r1, #714	@ 0x2ca
 800169c:	4812      	ldr	r0, [pc, #72]	@ (80016e8 <HAL_RCC_ClockConfig+0x308>)
 800169e:	f000 fa75 	bl	8001b8c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016a2:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <HAL_RCC_ClockConfig+0x30c>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	490e      	ldr	r1, [pc, #56]	@ (80016ec <HAL_RCC_ClockConfig+0x30c>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016b6:	f000 f821 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <HAL_RCC_ClockConfig+0x30c>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	490a      	ldr	r1, [pc, #40]	@ (80016f0 <HAL_RCC_ClockConfig+0x310>)
 80016c8:	5ccb      	ldrb	r3, [r1, r3]
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	4a09      	ldr	r2, [pc, #36]	@ (80016f4 <HAL_RCC_ClockConfig+0x314>)
 80016d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_RCC_ClockConfig+0x318>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff18 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	08001db4 	.word	0x08001db4
 80016ec:	40023800 	.word	0x40023800
 80016f0:	08001dec 	.word	0x08001dec
 80016f4:	20000008 	.word	0x20000008
 80016f8:	20000000 	.word	0x20000000

080016fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001700:	b094      	sub	sp, #80	@ 0x50
 8001702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001714:	4b79      	ldr	r3, [pc, #484]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b08      	cmp	r3, #8
 800171e:	d00d      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0x40>
 8001720:	2b08      	cmp	r3, #8
 8001722:	f200 80e1 	bhi.w	80018e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x34>
 800172a:	2b04      	cmp	r3, #4
 800172c:	d003      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0x3a>
 800172e:	e0db      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001730:	4b73      	ldr	r3, [pc, #460]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x204>)
 8001732:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001734:	e0db      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001736:	4b73      	ldr	r3, [pc, #460]	@ (8001904 <HAL_RCC_GetSysClockFreq+0x208>)
 8001738:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800173a:	e0d8      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800173c:	4b6f      	ldr	r3, [pc, #444]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x200>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001744:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001746:	4b6d      	ldr	r3, [pc, #436]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d063      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001752:	4b6a      	ldr	r3, [pc, #424]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	099b      	lsrs	r3, r3, #6
 8001758:	2200      	movs	r2, #0
 800175a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800175c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800175e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001764:	633b      	str	r3, [r7, #48]	@ 0x30
 8001766:	2300      	movs	r3, #0
 8001768:	637b      	str	r3, [r7, #52]	@ 0x34
 800176a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800176e:	4622      	mov	r2, r4
 8001770:	462b      	mov	r3, r5
 8001772:	f04f 0000 	mov.w	r0, #0
 8001776:	f04f 0100 	mov.w	r1, #0
 800177a:	0159      	lsls	r1, r3, #5
 800177c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001780:	0150      	lsls	r0, r2, #5
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4621      	mov	r1, r4
 8001788:	1a51      	subs	r1, r2, r1
 800178a:	6139      	str	r1, [r7, #16]
 800178c:	4629      	mov	r1, r5
 800178e:	eb63 0301 	sbc.w	r3, r3, r1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017a0:	4659      	mov	r1, fp
 80017a2:	018b      	lsls	r3, r1, #6
 80017a4:	4651      	mov	r1, sl
 80017a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017aa:	4651      	mov	r1, sl
 80017ac:	018a      	lsls	r2, r1, #6
 80017ae:	4651      	mov	r1, sl
 80017b0:	ebb2 0801 	subs.w	r8, r2, r1
 80017b4:	4659      	mov	r1, fp
 80017b6:	eb63 0901 	sbc.w	r9, r3, r1
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ce:	4690      	mov	r8, r2
 80017d0:	4699      	mov	r9, r3
 80017d2:	4623      	mov	r3, r4
 80017d4:	eb18 0303 	adds.w	r3, r8, r3
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	462b      	mov	r3, r5
 80017dc:	eb49 0303 	adc.w	r3, r9, r3
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017ee:	4629      	mov	r1, r5
 80017f0:	024b      	lsls	r3, r1, #9
 80017f2:	4621      	mov	r1, r4
 80017f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017f8:	4621      	mov	r1, r4
 80017fa:	024a      	lsls	r2, r1, #9
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001802:	2200      	movs	r2, #0
 8001804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001806:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001808:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800180c:	f7fe fce4 	bl	80001d8 <__aeabi_uldivmod>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4613      	mov	r3, r2
 8001816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001818:	e058      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181a:	4b38      	ldr	r3, [pc, #224]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x200>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	099b      	lsrs	r3, r3, #6
 8001820:	2200      	movs	r2, #0
 8001822:	4618      	mov	r0, r3
 8001824:	4611      	mov	r1, r2
 8001826:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001830:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001834:	4642      	mov	r2, r8
 8001836:	464b      	mov	r3, r9
 8001838:	f04f 0000 	mov.w	r0, #0
 800183c:	f04f 0100 	mov.w	r1, #0
 8001840:	0159      	lsls	r1, r3, #5
 8001842:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001846:	0150      	lsls	r0, r2, #5
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4641      	mov	r1, r8
 800184e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001852:	4649      	mov	r1, r9
 8001854:	eb63 0b01 	sbc.w	fp, r3, r1
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001864:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001868:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800186c:	ebb2 040a 	subs.w	r4, r2, sl
 8001870:	eb63 050b 	sbc.w	r5, r3, fp
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	00eb      	lsls	r3, r5, #3
 800187e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001882:	00e2      	lsls	r2, r4, #3
 8001884:	4614      	mov	r4, r2
 8001886:	461d      	mov	r5, r3
 8001888:	4643      	mov	r3, r8
 800188a:	18e3      	adds	r3, r4, r3
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	464b      	mov	r3, r9
 8001890:	eb45 0303 	adc.w	r3, r5, r3
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018a2:	4629      	mov	r1, r5
 80018a4:	028b      	lsls	r3, r1, #10
 80018a6:	4621      	mov	r1, r4
 80018a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018ac:	4621      	mov	r1, r4
 80018ae:	028a      	lsls	r2, r1, #10
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018b6:	2200      	movs	r2, #0
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	61fa      	str	r2, [r7, #28]
 80018bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018c0:	f7fe fc8a 	bl	80001d8 <__aeabi_uldivmod>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4613      	mov	r3, r2
 80018ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x200>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	3301      	adds	r3, #1
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80018dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018e6:	e002      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x204>)
 80018ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3750      	adds	r7, #80	@ 0x50
 80018f4:	46bd      	mov	sp, r7
 80018f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	00f42400 	.word	0x00f42400
 8001904:	007a1200 	.word	0x007a1200

08001908 <main>:
  */

uint8_t buttonStatus;

int main(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initialises the Flash interface and the Systick. */
  HAL_Init();
 800190c:	f7fe fddc 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001910:	f000 f81a 	bl	8001948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001914:	f000 f882 	bl	8001a1c <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Get Button state from Pin
	  buttonStatus = HAL_GPIO_ReadPin(BTN_GPIO_Port,BTN_Pin) ;
 8001918:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800191c:	4807      	ldr	r0, [pc, #28]	@ (800193c <main+0x34>)
 800191e:	f7ff f9e7 	bl	8000cf0 <HAL_GPIO_ReadPin>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <main+0x38>)
 8001928:	701a      	strb	r2, [r3, #0]
	  // Propagate status to LED
	  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,buttonStatus);
 800192a:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <main+0x38>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	2120      	movs	r1, #32
 8001932:	4804      	ldr	r0, [pc, #16]	@ (8001944 <main+0x3c>)
 8001934:	f7ff f9fc 	bl	8000d30 <HAL_GPIO_WritePin>
	  buttonStatus = HAL_GPIO_ReadPin(BTN_GPIO_Port,BTN_Pin) ;
 8001938:	bf00      	nop
 800193a:	e7ed      	b.n	8001918 <main+0x10>
 800193c:	40020800 	.word	0x40020800
 8001940:	2000002c 	.word	0x2000002c
 8001944:	40020000 	.word	0x40020000

08001948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b094      	sub	sp, #80	@ 0x50
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 0320 	add.w	r3, r7, #32
 8001952:	2230      	movs	r2, #48	@ 0x30
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f9b7 	bl	8001cca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <SystemClock_Config+0xcc>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	4a27      	ldr	r2, [pc, #156]	@ (8001a14 <SystemClock_Config+0xcc>)
 8001976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197a:	6413      	str	r3, [r2, #64]	@ 0x40
 800197c:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <SystemClock_Config+0xcc>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <SystemClock_Config+0xd0>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a21      	ldr	r2, [pc, #132]	@ (8001a18 <SystemClock_Config+0xd0>)
 8001992:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b1f      	ldr	r3, [pc, #124]	@ (8001a18 <SystemClock_Config+0xd0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019a4:	2302      	movs	r3, #2
 80019a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a8:	2301      	movs	r3, #1
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ac:	2310      	movs	r3, #16
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b0:	2302      	movs	r3, #2
 80019b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019b4:	2300      	movs	r3, #0
 80019b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019b8:	2310      	movs	r3, #16
 80019ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80019c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019c2:	2304      	movs	r3, #4
 80019c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019c6:	2304      	movs	r3, #4
 80019c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ca:	f107 0320 	add.w	r3, r7, #32
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f9da 	bl	8000d88 <HAL_RCC_OscConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019da:	f000 f8d1 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019de:	230f      	movs	r3, #15
 80019e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e2:	2302      	movs	r3, #2
 80019e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2102      	movs	r1, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fcf0 	bl	80013e0 <HAL_RCC_ClockConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a06:	f000 f8bb 	bl	8001b80 <Error_Handler>
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	3750      	adds	r7, #80	@ 0x50
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40007000 	.word	0x40007000

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	@ 0x28
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b4d      	ldr	r3, [pc, #308]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a4c      	ldr	r2, [pc, #304]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b4a      	ldr	r3, [pc, #296]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b46      	ldr	r3, [pc, #280]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a45      	ldr	r2, [pc, #276]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b43      	ldr	r3, [pc, #268]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a3e      	ldr	r2, [pc, #248]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b38      	ldr	r3, [pc, #224]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a37      	ldr	r2, [pc, #220]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b35      	ldr	r3, [pc, #212]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4b31      	ldr	r3, [pc, #196]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a30      	ldr	r2, [pc, #192]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <MX_GPIO_Init+0x150>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	482b      	ldr	r0, [pc, #172]	@ (8001b70 <MX_GPIO_Init+0x154>)
 8001ac4:	f7ff f934 	bl	8000d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001ac8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4825      	ldr	r0, [pc, #148]	@ (8001b74 <MX_GPIO_Init+0x158>)
 8001ade:	f7fe fe6f 	bl	80007c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ae2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001ae6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	481f      	ldr	r0, [pc, #124]	@ (8001b74 <MX_GPIO_Init+0x158>)
 8001af8:	f7fe fe62 	bl	80007c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001afc:	f649 73df 	movw	r3, #40927	@ 0x9fdf
 8001b00:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b02:	2303      	movs	r3, #3
 8001b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4817      	ldr	r0, [pc, #92]	@ (8001b70 <MX_GPIO_Init+0x154>)
 8001b12:	f7fe fe55 	bl	80007c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b16:	2320      	movs	r3, #32
 8001b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4810      	ldr	r0, [pc, #64]	@ (8001b70 <MX_GPIO_Init+0x154>)
 8001b2e:	f7fe fe47 	bl	80007c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001b32:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8001b36:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <MX_GPIO_Init+0x15c>)
 8001b48:	f7fe fe3a 	bl	80007c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b50:	2303      	movs	r3, #3
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4807      	ldr	r0, [pc, #28]	@ (8001b7c <MX_GPIO_Init+0x160>)
 8001b60:	f7fe fe2e 	bl	80007c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020800 	.word	0x40020800
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020c00 	.word	0x40020c00

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <Error_Handler+0x8>

08001b8c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a08      	ldr	r2, [pc, #32]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001be2:	2007      	movs	r0, #7
 8001be4:	f7fe fd94 	bl	8000710 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <NMI_Handler+0x4>

08001bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <HardFault_Handler+0x4>

08001c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <MemManage_Handler+0x4>

08001c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4a:	f7fe fc8f 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <SystemInit+0x20>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <SystemInit+0x20>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c7c:	f7ff ffea 	bl	8001c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c80:	480c      	ldr	r0, [pc, #48]	@ (8001cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c82:	490d      	ldr	r1, [pc, #52]	@ (8001cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c84:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c98:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f000 f819 	bl	8001cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001caa:	f7ff fe2d 	bl	8001908 <main>
  bx  lr    
 8001cae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001cbc:	08001e0c 	.word	0x08001e0c
  ldr r2, =_sbss
 8001cc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001cc4:	20000030 	.word	0x20000030

08001cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC_IRQHandler>

08001cca <memset>:
 8001cca:	4402      	add	r2, r0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d100      	bne.n	8001cd4 <memset+0xa>
 8001cd2:	4770      	bx	lr
 8001cd4:	f803 1b01 	strb.w	r1, [r3], #1
 8001cd8:	e7f9      	b.n	8001cce <memset+0x4>
	...

08001cdc <__libc_init_array>:
 8001cdc:	b570      	push	{r4, r5, r6, lr}
 8001cde:	4d0d      	ldr	r5, [pc, #52]	@ (8001d14 <__libc_init_array+0x38>)
 8001ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8001d18 <__libc_init_array+0x3c>)
 8001ce2:	1b64      	subs	r4, r4, r5
 8001ce4:	10a4      	asrs	r4, r4, #2
 8001ce6:	2600      	movs	r6, #0
 8001ce8:	42a6      	cmp	r6, r4
 8001cea:	d109      	bne.n	8001d00 <__libc_init_array+0x24>
 8001cec:	4d0b      	ldr	r5, [pc, #44]	@ (8001d1c <__libc_init_array+0x40>)
 8001cee:	4c0c      	ldr	r4, [pc, #48]	@ (8001d20 <__libc_init_array+0x44>)
 8001cf0:	f000 f818 	bl	8001d24 <_init>
 8001cf4:	1b64      	subs	r4, r4, r5
 8001cf6:	10a4      	asrs	r4, r4, #2
 8001cf8:	2600      	movs	r6, #0
 8001cfa:	42a6      	cmp	r6, r4
 8001cfc:	d105      	bne.n	8001d0a <__libc_init_array+0x2e>
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
 8001d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d04:	4798      	blx	r3
 8001d06:	3601      	adds	r6, #1
 8001d08:	e7ee      	b.n	8001ce8 <__libc_init_array+0xc>
 8001d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d0e:	4798      	blx	r3
 8001d10:	3601      	adds	r6, #1
 8001d12:	e7f2      	b.n	8001cfa <__libc_init_array+0x1e>
 8001d14:	08001e04 	.word	0x08001e04
 8001d18:	08001e04 	.word	0x08001e04
 8001d1c:	08001e04 	.word	0x08001e04
 8001d20:	08001e08 	.word	0x08001e08

08001d24 <_init>:
 8001d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d26:	bf00      	nop
 8001d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d2a:	bc08      	pop	{r3}
 8001d2c:	469e      	mov	lr, r3
 8001d2e:	4770      	bx	lr

08001d30 <_fini>:
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	bf00      	nop
 8001d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d36:	bc08      	pop	{r3}
 8001d38:	469e      	mov	lr, r3
 8001d3a:	4770      	bx	lr
